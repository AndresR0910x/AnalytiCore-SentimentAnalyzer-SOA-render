name: CI/CD Pipeline for AnalytiCore

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout del código
      - name: Checkout code
        uses: actions/checkout@v4

      # Configurar Node.js para el frontend
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Compilar el proyecto frontend
      - name: Build frontend
        run: |
          cd frontend
          npm install
          npm run build

      # Configurar JDK 21 para compilar Java
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'  # Cambiar a temurin para mayor compatibilidad

      # Compilar el proyecto Java con Maven
      - name: Build Java project
        run: |
          cd java-service
          mvn clean package -DskipTests
        env:
          MAVEN_OPTS: "-Xmx1024m"

      # Configurar QEMU y Buildx para multiarquitectura
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Iniciar sesión en Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Construir y empujar la imagen del frontend
      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/react-frontend:latest

      # Construir y empujar la imagen del Servicio de Submisión
      - name: Build and push submission-service
        uses: docker/build-push-action@v5
        with:
          context: ./python-service
          file: ./python-service/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/api-submission-service:latest

      # Construir y empujar la imagen del Servicio de Análisis
      - name: Build and push analysis-service
        uses: docker/build-push-action@v5
        with:
          context: ./java-service
          file: ./java-service/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/analysis-service:latest

      # Desplegar en Render (Frontend)
      - name: Deploy to Render - Frontend
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"service_id": "${{ secrets.RENDER_FRONTEND_SERVICE_ID }}", "clear_cache": true}' \
            https://api.render.com/v1/services/${{ secrets.RENDER_FRONTEND_SERVICE_ID }}/deploys

      # Desplegar en Render (Servicio de Submisión)
      - name: Deploy to Render - Submission Service
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"service_id": "${{ secrets.RENDER_SUBMISSION_SERVICE_ID }}", "clear_cache": true}' \
            https://api.render.com/v1/services/${{ secrets.RENDER_SUBMISSION_SERVICE_ID }}/deploys

      # Desplegar en Render (Servicio de Análisis)
      - name: Deploy to Render - Analysis Service
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"service_id": "${{ secrets.RENDER_ANALYSIS_SERVICE_ID }}", "clear_cache": true}' \
            https://api.render.com/v1/services/${{ secrets.RENDER_ANALYSIS_SERVICE_ID }}/deploys